{
  "name": "calais",
  "version": "0.3.2",
  "description": "Semantically analyze text using the Calais web service. Original project http://github.com/mcantelon/node-calais",
  "tags": [
    "semantic",
    "calais"
  ],
  "contributors": [],
  "dependencies": {
    "optimist": ">=0.1.3",
    "request": ">=2.25.1",
    "iniparser": ">=1.0.1"
  },
  "main": "./lib/calais",
  "directories": {
    "lib": "./lib"
  },
  "bin": {
    "calais": "./calais.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mcantelon/node-calais"
  },
  "engines": {
    "node": ">= 0.3.0"
  },
  "bugs": {
    "url": "https://github.com/mcantelon/node-calais/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/mcantelon/node-calais/blob/master/LICENSE"
    }
  ],
  "devDependencies": {
    "jshint": "^2.5.1"
  },
  "readme": "# node-calais #\n\nnode-calais allows semantic analysis of text using the Calais web service.\n\n## Install ##\n\nInstall using npm:\n    $ npm install calais\n\n## Usage ##\n\n    var calais = new Calais('<YOUR API KEY>')\n    calais.set('content', 'The Federal Reserve is the enemy of Ron Paul.')\n    calais.fetch(function(result) {\n      // do something with result\n    })\n\n## Example ##\n\nRun quick example:\n    $ node example.js\n\n## Options ##\n\nIn addition to using the \"set\" method, a hash of option settings can be passed\nas the second argument during intialization. For example:\n\n    var calais = new Calais('<YOUR API KEY>', {'cleanResult': false})\n\nBy default, node-calais will return fetched results as a Javascript object.\nAlternatively, the Calais standard \"outputFormat\" input parameter can be set to\nstandard output formats (see Calais documentation).\n\nAny standard Calais input parameter can be specified as an option, as well as\nthe 'cleanResult' parameter which will return a simplified Javascript object if\n\"outputFormat\" hasn't been set to something other than the default ('object').\n\n## CLI Tool ##\n\nThe library also comes with a CLI tool for sending text files to Calais for\nanalysis.\n\nExample:\n\n    calais some_key_file -k my_api_key\n\nIf you use the CLI tool regularly, you can specify a default API key by setting\nthe `api_key` property in an .ini file at $HOME/.calais.\n\n## Test ##\n\nRun tests:\n    $ expresso test/calais.test.js\n\nTested with node.js v0.11.13\n\n## Contributors ##\n\nMike Cantelon (github: mcantelon)\n\nD. Charbonnier (github: dcharbonnier)\n\nDirk Gorissen (github: dgorissen)\n\nHarry Guillermo (github: hguillermo)\n\n(c) 2010-2014 Mike Cantelon, MIT license\n",
  "readmeFilename": "README.md",
  "_id": "calais@0.3.2",
  "_from": "calais@"
}
